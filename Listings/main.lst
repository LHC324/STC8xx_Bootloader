C51 COMPILER V9.60.0.0   MAIN                                                              01/14/2023 22:17:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\main.c LARGE OPTIMIZE(9,SPEED) BROWSE FLOATFUZZY(4) INCDIR(.\Inc) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "GPIO.h"
   2          #include "usart.h"
   3          #include "eeprom.h"
   4          #include "spi.h"
   5          #include "w25qx.h"
   6          
   7          /*************  Êú¨Âú∞ÂèòÈáèÂ£∞Êòé      **************/
   8          static uint8_t data_buf[0x200];
   9          // sfr IAP_TPS = 0xf5; // EEPROMÊì¶Èô§Á≠âÂæÖÊó∂Èó¥ÊéßÂà∂ÂØÑÂ≠òÂô®
  10          #define read_jmp_addr (*(unsigned char code *)(USER_FLASH_ADDR))       // ËØªÂèñjmpÊåá‰ª§
  11          #define read_file_size_addr (*(unsigned char code *)(USER_FLASH_ADDR)) // ËØªÂèñÊñá‰ª∂Â∞∫ÂØ∏
  12          #define read_app_addr (*(unsigned int code *)(APP_JMP_ADDR))           // ËØªÂèñappÁöÑË∑≥ËΩ¨Âú∞ÂùÄ
  13          #define read_ota_addr (*(unsigned char code *)(OTA_FLAG_ADDR))         // ËØªÂèñotaÊ†áÂøó
  14          void (*jmp_app)(void);                                                 // Ë∑≥ËΩ¨ÂáΩÊï∞
  15          
  16          /*************  Êú¨Âú∞ÂáΩÊï∞Â£∞Êòé      **************/
  17          typedef struct
  18          {
  19              uint16_t ota_value;
  20              uint16_t file_size;
  21          } file_info;
  22          
  23          static void reset_ota_flag(void)
  24          {
  25   1          file_info info = {0, 0};
  26   1      
  27   1          dev_flash_read_bytes((uint8_t *)&info, OTA_FLAG_ADDR, sizeof(info));
  28   1      
  29   1          if (OTA_FLAG_VALUE == info.ota_value)
  30   1          {
  31   2              info.ota_value = ~OTA_FLAG_VALUE;
  32   2              dev_flash_auto_adapt_erase(OTA_FLAG_ADDR, sizeof(info));
  33   2              dev_flash_write_page((uint8_t *)&info, OTA_FLAG_ADDR, sizeof(info));
  34   2          }
  35   1      
  36   1          // uint16_t ota_flag = ~OTA_FLAG_VALUE;
  37   1          // if (read_ota_addr != (~OTA_FLAG_VALUE))
  38   1          //     IapWrites(OTA_FLAG_ADDR, (uint8_t *)&ota_flag, sizeof(ota_flag)); // Êì¶Èô§otaÊ†áÂøó
  39   1      }
  40          
  41          static void set_ota_flag(void)
  42          {
  43   1          file_info info = {0, 0};
  44   1      
  45   1          dev_flash_read_bytes((uint8_t *)&info, OTA_FLAG_ADDR, sizeof(info));
  46   1      
  47   1          if ((~OTA_FLAG_VALUE) == info.ota_value)
  48   1          {
  49   2              info.ota_value = OTA_FLAG_VALUE;
  50   2              dev_flash_auto_adapt_erase(OTA_FLAG_ADDR, sizeof(info));
  51   2              dev_flash_write_page((uint8_t *)&info, OTA_FLAG_ADDR, sizeof(info));
  52   2          }
  53   1      
  54   1          // uint16_t ota_flag = OTA_FLAG_VALUE;
C51 COMPILER V9.60.0.0   MAIN                                                              01/14/2023 22:17:11 PAGE 2   

  55   1          // if (read_ota_addr != OTA_FLAG_VALUE)
  56   1          //     IapWrites(OTA_FLAG_ADDR, (uint8_t *)&ota_flag, sizeof(ota_flag)); // ÂÜôÂÖ•otaÊ†áÂøó
  57   1      }
  58          
  59          // #if !defined USING_SIMULATE
  60          static void display_hex_data(uint8_t *dat, uint32_t len)
  61          {
  62   1      #define __is_print(ch) ((unsigned int)((ch) - ' ') < 127u - ' ')
  63   1      #define HEXDUMP_WIDTH 16
  64   1          uint16_t i, j;
  65   1      
  66   1          if (NULL == dat || !len)
  67   1              return;
  68   1      
  69   1          for (i = 0; i < len; i += HEXDUMP_WIDTH)
  70   1          {
  71   2              Uartx_Printf(OTA_WORK_UART, "\r\n[%04x]: ", i);
  72   2              for (j = 0; j < HEXDUMP_WIDTH; ++j)
  73   2              {
  74   3                  if (i + j < len)
  75   3                  {
  76   4                      Uartx_Printf(OTA_WORK_UART, "%02bX ", dat[i + j]);
  77   4                  }
  78   3                  else
  79   3                  {
  80   4                      Uartx_Printf(OTA_WORK_UART, "   ");
  81   4                  }
  82   3              }
  83   2              Uartx_Printf(OTA_WORK_UART, "\t\t");
  84   2              for (j = 0; (i + j < len) && j < HEXDUMP_WIDTH; ++j)
  85   2                  Uartx_Printf(OTA_WORK_UART, "%c",
  86   2                               __is_print(dat[i + j]) ? dat[i + j] : '.');
  87   2          }
  88   1          if (len)
  89   1              Uartx_Printf(OTA_WORK_UART, "\r\n\r\n");
  90   1      }
  91          // #endif
  92          
  93          static void Delay1000ms() //@24MHz
  94          {
  95   1          unsigned char i, j, k;
  96   1      
  97   1          _nop_();
  98   1          _nop_();
  99   1          i = 255;
 100   1          j = 193;
 101   1          k = 128;
 102   1          do
 103   1          {
 104   2              do
 105   2              {
 106   3                  while (--k)
 107   3                      ;
 108   3              } while (--j);
 109   2          } while (--i);
 110   1      }
 111          
 112          void main(void)
 113          {
 114   1          GPIO_InitTypeDef GPIO_InitStruct = {0};
 115   1          file_info info = {0, 0};
 116   1          uint16_t i;
C51 COMPILER V9.60.0.0   MAIN                                                              01/14/2023 22:17:11 PAGE 3   

 117   1      #define USING_W25QX______________________________________
 118   1          {
 119   2      #define W25QX_NSS GPIO_Pin_2
 120   2      #define W25QX_MOSI GPIO_Pin_3
 121   2      #define W25QX_MISO GPIO_Pin_4
 122   2      #define W25QX_CLK GPIO_Pin_5
 123   2      #define W25QX_PORT GPIO_P2
 124   2      
 125   2              SPIInit_Type spi = {
 126   2                  SPI_Type_Master,
 127   2                  SPI_SCLK_DIV_16,
 128   2                  SPI_Mode_0,
 129   2                  SPI_Tran_MSB,
 130   2                  true,
 131   2              };
 132   2      
 133   2              GPIO_InitStruct.Mode = GPIO_OUT_PP;
 134   2              GPIO_InitStruct.Pin = W25QX_NSS | W25QX_CLK | W25QX_MOSI;
 135   2              GPIO_Inilize(W25QX_PORT, &GPIO_InitStruct);
 136   2      
 137   2              GPIO_InitStruct.Mode = GPIO_HighZ;
 138   2              GPIO_InitStruct.Pin = W25QX_MISO;
 139   2              GPIO_Inilize(W25QX_PORT, &GPIO_InitStruct);
 140   2      
 141   2              GPIO_spi_sw_port(SW_Port2);
 142   2              spi_init(&spi);
 143   2          }
 144   1      #if !defined USING_SIMULATE
                  Uart1_Init();
              #endif
 147   1          /*‰∏≤Âè£2ÂàùÂßãÂåñ*/
 148   1          Uart2_Init();
 149   1      #if (!DWIN_USING_RB)
 150   1          /*ÂÖ≥Èó≠ÂÖ®Â±Ä‰∏≠Êñ≠*/
 151   1          CLOSE_GLOBAL_OUTAGE();
 152   1      #else
                  IE2 &= ~0x80;
                  IE2 &= ~0x10;
                  OPEN_GLOBAL_OUTAGE();
              #endif
 157   1      
 158   1          // IAP_TPS = 24; // STC8GÂíåSTC8HÁöÑËÆæÁΩÆÔºåÈªòËÆ§24MHz„ÄÇ
 159   1          Uartx_Printf(OTA_WORK_UART, "SPI FLASH ID: %#x.\r\n", dev_flash_read_device_id());
 160   1          while (1)
 161   1          {
 162   2          __read_ota_flag:
 163   2              // Iap_Reads(OTA_FLAG_ADDR, (uint8_t *)&info, sizeof(info)); // ËØªÂèñÊñá‰ª∂‰ø°ÊÅØ
 164   2              dev_flash_read_bytes((uint8_t *)&info, OTA_FLAG_ADDR, sizeof(info));
 165   2              Uartx_Printf(OTA_WORK_UART, "ota_flag\tfile_size\r\n%#x\t\t%#X\r\n", info.ota_value, info.file_siz
             -e);
 166   2              if (info.file_size && (OTA_FLAG_VALUE == info.ota_value)) // OTA_FLAG_VALUE == read_ota_addr      
             -            // IapRead(OTA_FLAG_ADDR)
 167   2              {
 168   3                  Uartx_Printf(OTA_WORK_UART, " start erase...\r\n");
 169   3                  for (i = 0; i < info.file_size && i < (USER_FLASH_ADDR - SECTOR_SIZE); i += SECTOR_SIZE) // Êì
             -¶Èô§NÈ°µ
 170   3                  {
 171   4                      dev_flash_read_bytes(data_buf, i, SECTOR_SIZE);
 172   4                      // display_hex_data(data_buf, SECTOR_SIZE);
 173   4      
 174   4                      // Uartx_Printf(OTA_WORK_UART, "read:\r\n");
 175   4                      // // Iap_Reads(i, data_buf, SECTOR_SIZE);
C51 COMPILER V9.60.0.0   MAIN                                                              01/14/2023 22:17:11 PAGE 4   

 176   4                      // display_hex_data(data_buf, SECTOR_SIZE);
 177   4      
 178   4                      if (0 == i)
 179   4                      {
 180   5                          Iap_Reads(i, data_buf, 3U); // ËØªÂá∫3Â≠óËäÇbootÂú∞ÂùÄ
 181   5                          Uartx_Printf(OTA_WORK_UART, "boot loader addr: 0x%bX 0x%bX 0x%bX .\r\n",
 182   5                                       data_buf[0], data_buf[1], data_buf[2]);
 183   5                      }
 184   4                      // IapErase(i);
 185   4      
 186   4                      IapWrites(i, data_buf, sizeof(data_buf));
 187   4      
 188   4                      Uartx_Printf(OTA_WORK_UART, "rate: %02d%%\b\b\b\r", (uint16_t)(((uint32_t)i * 100U) / info
             -.file_size));
 189   4                  }
 190   3      
 191   3                  /*ÂèñÊ∂àÂçáÁ∫ßÊ†áÂøó*/
 192   3                  reset_ota_flag();
 193   3                  Uartx_Printf(OTA_WORK_UART, "\r\nProgramming completed.\r\n");
 194   3                  goto __read_ota_flag;
 195   3              }
 196   2              // Uartx_Printf(OTA_WORK_UART, "read:\r\n");
 197   2              // Iap_Reads(0, data_buf, SECTOR_SIZE);
 198   2              // display_hex_data(data_buf, SECTOR_SIZE);
 199   2      
 200   2              dev_flash_read_bytes(data_buf, 0x00, 3U);
 201   2              if (((~OTA_FLAG_VALUE) == info.ota_value) && (data_buf[0] == LJMP))
 202   2              {
 203   3      #if (DWIN_USING_RB)
                          /*ÂÖ≥Èó≠ÂÖ®Â±Ä‰∏≠Êñ≠*/
                          CLOSE_GLOBAL_OUTAGE();
              #endif
 207   3                  jmp_app = (uint32_t)((uint16_t)data_buf[1] << 8U | data_buf[2]);
 208   3                  Uartx_Printf(OTA_WORK_UART, "start jump user app[%#X]......\r\n",
 209   3                               (uint16_t)data_buf[1] << 8U | data_buf[2]);
 210   3                  jmp_app();
 211   3              }
 212   2              else
 213   2              {
 214   3                  // set_ota_flag(); // È¶ñÊ¨°‰ªéSPI flashÂä†ËΩΩÂà∞ÂÜÖÈÉ®ROM
 215   3                  // if (read_jmp_addr != 0xFF)
 216   3                  //     IapErase(USER_FLASH_ADDR); // Êì¶Èô§Ë∑≥ËΩ¨Âú∞ÂùÄÔºåÈò≤Ê≠¢ÂèòÁ†ñ
 217   3                  Uartx_Printf(OTA_WORK_UART, "illegal instruction!\r\n");
 218   3              }
 219   2      
 220   2              if ((data_buf[0] == LJMP)) // Ëß£ÂÜ≥ÂÜÖÈÉ®romÂíåÂ§ñÈÉ®flash‰∏çÂåπÈÖçÈóÆÈ¢ò
 221   2                  set_ota_flag();
 222   2      
 223   2              /*Á®ãÂ∫èÂå∫ÊçüÂùèÊàñËÄÖÂÜôÂÖ•ÊúüÈó¥Êñ≠ÁîµÂØºËá¥ÂçáÁ∫ßÂ§±Ë¥•ÔºåÂÜôÂÖ•otaÊ†áÂøóÔºåËØ∑Ê±ÇÊõ¥Êñ∞Áî®Êà∑
             -Á®ãÂ∫è*/
 224   2              // set_ota_flag();
 225   2      
 226   2              Uartx_Printf(OTA_WORK_UART, "no appliction !\r\n");
 227   2              Delay1000ms();
 228   2          }
 229   1      }
 230          
 231          /**
 232           * @brief       Â§ç‰ΩçÁ°¨‰ª∂ÂØÑÂ≠òÂô®
 233           * @details     ÈÉ®ÂàÜÂ§ñËÆæÂØÑÂ≠òÂô®Âú®‰∏äÁîµÊó∂ÈªòËÆ§ÂÄºÂπ∂‰∏ç‰∏∫0ÔºåÈúÄË¶ÅÊ∏ÖÈô§ÂÖ∂ÈªòËÆ§ÂÄº
 234           * @param       None
 235           * @retval      None
C51 COMPILER V9.60.0.0   MAIN                                                              01/14/2023 22:17:11 PAGE 5   

 236           */
 237          // static void Reset_Registers(void)
 238          // {
 239          //     AUXR = 0x00;
 240          //     S2CON = 0x00;
 241          //     SCON = 0;
 242          //     TMOD = 0;
 243          //     TL0 = 0;
 244          //     TH0 = 0;
 245          //     TH1 = 0;
 246          //     TL1 = 0;
 247          //     TCON = 0;
 248          //     IAP_CMD = 0;
 249          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1234    ----
   CONSTANT SIZE    =    280    ----
   XDATA SIZE       =    515      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
