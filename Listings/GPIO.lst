C51 COMPILER V9.60.0.0   GPIO                                                              01/03/2023 21:14:42 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Objects\GPIO.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\GPIO.c LARGE OPTIMIZE(9,SPEED) BROWSE FLOATFUZZY(4) INCDIR(.\Inc) DE
                    -BUG OBJECTEXTEND PRINT(.\Listings\GPIO.lst) OBJECT(.\Objects\GPIO.obj)

line level    source

   1          
   2          /*************  功能说明    **************
   3          
   4          本文件为STC8xxx系列的端口初始化程序,用户几乎可以不修改这个程序.
   5          
   6          
   7          ******************************************/
   8          
   9          #include "GPIO.h"
  10          
  11          /**
  12           * @brief       初始化IO口
  13           * @details     对应功能引脚都需要初始化后使用.
  14           * @param       GPIOx: 结构参数,请参考timer.h里的定义.
  15           * @retval      成功返回0, 空操作返回1,错误返回2.
  16           * @version V2.0,2022/01/15
  17           */
  18          uint8_t GPIO_IOInit(uint8_t GPIO, GPIO_InitTypeDef *GPIOx)
  19          {
  20   1              if (GPIO > GPIO_P5)
  21   1                      return 1; //空操作
  22   1              if (GPIOx->Mode > GPIO_OUT_PP)
  23   1                      return 2; //错误
  24   1      
  25   1              switch (GPIO)
  26   1              {
  27   2              case GPIO_P0:
  28   2              {
  29   3                      if (GPIOx->Mode == GPIO_PullUp)
  30   3                              P0M1 &= ~GPIOx->Pin, P0M0 &= ~GPIOx->Pin; //上拉准双向口
  31   3                      if (GPIOx->Mode == GPIO_HighZ)
  32   3                              P0M1 |= GPIOx->Pin, P0M0 &= ~GPIOx->Pin; //浮空输入
  33   3                      if (GPIOx->Mode == GPIO_OUT_OD)
  34   3                              P0M1 |= GPIOx->Pin, P0M0 |= GPIOx->Pin; //开漏输出
  35   3                      if (GPIOx->Mode == GPIO_OUT_PP)
  36   3                              P0M1 &= ~GPIOx->Pin, P0M0 |= GPIOx->Pin; //推挽输出
  37   3              }
  38   2              break;
  39   2              case GPIO_P1:
  40   2              {
  41   3                      if (GPIOx->Mode == GPIO_PullUp)
  42   3                              P1M1 &= ~GPIOx->Pin, P1M0 &= ~GPIOx->Pin; //上拉准双向口
  43   3                      if (GPIOx->Mode == GPIO_HighZ)
  44   3                              P1M1 |= GPIOx->Pin, P1M0 &= ~GPIOx->Pin; //浮空输入
  45   3                      if (GPIOx->Mode == GPIO_OUT_OD)
  46   3                              P1M1 |= GPIOx->Pin, P1M0 |= GPIOx->Pin; //开漏输出
  47   3                      if (GPIOx->Mode == GPIO_OUT_PP)
  48   3                              P1M1 &= ~GPIOx->Pin, P1M0 |= GPIOx->Pin; //推挽输出
  49   3              }
  50   2              break;
  51   2              case GPIO_P2:
  52   2              {
  53   3                      if (GPIOx->Mode == GPIO_PullUp)
  54   3                              P2M1 &= ~GPIOx->Pin, P2M0 &= ~GPIOx->Pin; //上拉准双向口
C51 COMPILER V9.60.0.0   GPIO                                                              01/03/2023 21:14:42 PAGE 2   

  55   3                      if (GPIOx->Mode == GPIO_HighZ)
  56   3                              P2M1 |= GPIOx->Pin, P2M0 &= ~GPIOx->Pin; //浮空输入
  57   3                      if (GPIOx->Mode == GPIO_OUT_OD)
  58   3                              P2M1 |= GPIOx->Pin, P2M0 |= GPIOx->Pin; //开漏输出
  59   3                      if (GPIOx->Mode == GPIO_OUT_PP)
  60   3                              P2M1 &= ~GPIOx->Pin, P2M0 |= GPIOx->Pin; //推挽输出
  61   3              }
  62   2              break;
  63   2              case GPIO_P3:
  64   2              {
  65   3                      if (GPIOx->Mode == GPIO_PullUp)
  66   3                              P3M1 &= ~GPIOx->Pin, P3M0 &= ~GPIOx->Pin; //上拉准双向口
  67   3                      if (GPIOx->Mode == GPIO_HighZ)
  68   3                              P3M1 |= GPIOx->Pin, P3M0 &= ~GPIOx->Pin; //浮空输入
  69   3                      if (GPIOx->Mode == GPIO_OUT_OD)
  70   3                              P3M1 |= GPIOx->Pin, P3M0 |= GPIOx->Pin; //开漏输出
  71   3                      if (GPIOx->Mode == GPIO_OUT_PP)
  72   3                              P3M1 &= ~GPIOx->Pin, P3M0 |= GPIOx->Pin; //推挽输出
  73   3              }
  74   2              break;
  75   2              case GPIO_P4:
  76   2              {
  77   3                      if (GPIOx->Mode == GPIO_PullUp)
  78   3                              P4M1 &= ~GPIOx->Pin, P4M0 &= ~GPIOx->Pin; //上拉准双向口
  79   3                      if (GPIOx->Mode == GPIO_HighZ)
  80   3                              P4M1 |= GPIOx->Pin, P4M0 &= ~GPIOx->Pin; //浮空输入
  81   3                      if (GPIOx->Mode == GPIO_OUT_OD)
  82   3                              P4M1 |= GPIOx->Pin, P4M0 |= GPIOx->Pin; //开漏输出
  83   3                      if (GPIOx->Mode == GPIO_OUT_PP)
  84   3                              P4M1 &= ~GPIOx->Pin, P4M0 |= GPIOx->Pin; //推挽输出
  85   3              }
  86   2              break;
  87   2              case GPIO_P5:
  88   2              {
  89   3                      if (GPIOx->Mode == GPIO_PullUp)
  90   3                              P5M1 &= ~GPIOx->Pin, P5M0 &= ~GPIOx->Pin; //上拉准双向口
  91   3                      if (GPIOx->Mode == GPIO_HighZ)
  92   3                              P5M1 |= GPIOx->Pin, P5M0 &= ~GPIOx->Pin; //浮空输入
  93   3                      if (GPIOx->Mode == GPIO_OUT_OD)
  94   3                              P5M1 |= GPIOx->Pin, P5M0 |= GPIOx->Pin; //开漏输出
  95   3                      if (GPIOx->Mode == GPIO_OUT_PP)
  96   3                              P5M1 &= ~GPIOx->Pin, P5M0 |= GPIOx->Pin; //推挽输出
  97   3              }
  98   2              default:
  99   2                      break;
 100   2              }
 101   1              return 0; //成功
 102   1      
 103   1              // if(GPIO == GPIO_P0)
 104   1              // {
 105   1              //      if(GPIOx->Mode == GPIO_PullUp)          P0M1 &= ~GPIOx->Pin,    P0M0 &= ~GPIOx->Pin;     //上拉准双向口
 106   1              //      if(GPIOx->Mode == GPIO_HighZ)           P0M1 |=  GPIOx->Pin,    P0M0 &= ~GPIOx->Pin;     //浮空输入
 107   1              //      if(GPIOx->Mode == GPIO_OUT_OD)          P0M1 |=  GPIOx->Pin,    P0M0 |=  GPIOx->Pin;     //开漏输出
 108   1              //      if(GPIOx->Mode == GPIO_OUT_PP)          P0M1 &= ~GPIOx->Pin,    P0M0 |=  GPIOx->Pin;     //推挽输出
 109   1              // }
 110   1              // if(GPIO == GPIO_P1)
 111   1              // {
 112   1              //      if(GPIOx->Mode == GPIO_PullUp)          P1M1 &= ~GPIOx->Pin,    P1M0 &= ~GPIOx->Pin;     //上拉准双向口
 113   1              //      if(GPIOx->Mode == GPIO_HighZ)           P1M1 |=  GPIOx->Pin,    P1M0 &= ~GPIOx->Pin;     //浮空输入
 114   1              //      if(GPIOx->Mode == GPIO_OUT_OD)          P1M1 |=  GPIOx->Pin,    P1M0 |=  GPIOx->Pin;     //开漏输出
 115   1              //      if(GPIOx->Mode == GPIO_OUT_PP)          P1M1 &= ~GPIOx->Pin,    P1M0 |=  GPIOx->Pin;     //推挽输出
 116   1              // }
C51 COMPILER V9.60.0.0   GPIO                                                              01/03/2023 21:14:42 PAGE 3   

 117   1              // if(GPIO == GPIO_P2)
 118   1              // {
 119   1              //      if(GPIOx->Mode == GPIO_PullUp)          P2M1 &= ~GPIOx->Pin,    P2M0 &= ~GPIOx->Pin;     //上拉准双向口
 120   1              //      if(GPIOx->Mode == GPIO_HighZ)           P2M1 |=  GPIOx->Pin,    P2M0 &= ~GPIOx->Pin;     //浮空输入
 121   1              //      if(GPIOx->Mode == GPIO_OUT_OD)          P2M1 |=  GPIOx->Pin,    P2M0 |=  GPIOx->Pin;     //开漏输出
 122   1              //      if(GPIOx->Mode == GPIO_OUT_PP)          P2M1 &= ~GPIOx->Pin,    P2M0 |=  GPIOx->Pin;     //推挽输出
 123   1              // }
 124   1              // if(GPIO == GPIO_P3)
 125   1              // {
 126   1              //      if(GPIOx->Mode == GPIO_PullUp)          P3M1 &= ~GPIOx->Pin,    P3M0 &= ~GPIOx->Pin;     //上拉准双向口
 127   1              //      if(GPIOx->Mode == GPIO_HighZ)           P3M1 |=  GPIOx->Pin,    P3M0 &= ~GPIOx->Pin;     //浮空输入
 128   1              //      if(GPIOx->Mode == GPIO_OUT_OD)          P3M1 |=  GPIOx->Pin,    P3M0 |=  GPIOx->Pin;     //开漏输出
 129   1              //      if(GPIOx->Mode == GPIO_OUT_PP)          P3M1 &= ~GPIOx->Pin,    P3M0 |=  GPIOx->Pin;     //推挽输出
 130   1              // }
 131   1              // if(GPIO == GPIO_P4)
 132   1              // {
 133   1              //      if(GPIOx->Mode == GPIO_PullUp)          P4M1 &= ~GPIOx->Pin,    P4M0 &= ~GPIOx->Pin;     //上拉准双向口
 134   1              //      if(GPIOx->Mode == GPIO_HighZ)           P4M1 |=  GPIOx->Pin,    P4M0 &= ~GPIOx->Pin;     //浮空输入
 135   1              //      if(GPIOx->Mode == GPIO_OUT_OD)          P4M1 |=  GPIOx->Pin,    P4M0 |=  GPIOx->Pin;     //开漏输出
 136   1              //      if(GPIOx->Mode == GPIO_OUT_PP)          P4M1 &= ~GPIOx->Pin,    P4M0 |=  GPIOx->Pin;     //推挽输出
 137   1              // }
 138   1              // if(GPIO == GPIO_P5)
 139   1              // {
 140   1              //      if(GPIOx->Mode == GPIO_PullUp)          P5M1 &= ~GPIOx->Pin,    P5M0 &= ~GPIOx->Pin;     //上拉准双向口
 141   1              //      if(GPIOx->Mode == GPIO_HighZ)           P5M1 |=  GPIOx->Pin,    P5M0 &= ~GPIOx->Pin;     //浮空输入
 142   1              //      if(GPIOx->Mode == GPIO_OUT_OD)          P5M1 |=  GPIOx->Pin,    P5M0 |=  GPIOx->Pin;     //开漏输出
 143   1              //      if(GPIOx->Mode == GPIO_OUT_PP)          P5M1 &= ~GPIOx->Pin,    P5M0 |=  GPIOx->Pin;     //推挽输出
 144   1              // }
 145   1              // return 0;    //成功
 146   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    442    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
